//
//  TransactionImport.swift
//  Carteret
//
//  Created by Alexander Rohrig on 1/23/25.
//

import SwiftUI
import OSLog

struct TransactionImport: View {
    enum ImportState {
        case ready, loading, error, notSelected
        
        var image: String {
            switch self {
            case .ready:
                "doc.text"
            case .loading:
                "document.badge.clock"
            case .error:
                "doc.questionmark"
            case .notSelected:
                "document.badge.ellipsis"
            }
        }
    }
    
    let logger = Logger(subsystem: Constant.carteretSubsystem,
                        category: "TransactionImport")
    
    @Environment(\.modelContext) private var modelContext
    @Environment(\.dismiss) private var dismiss
    @State var showFiles = false
    @State var importState: ImportState = .notSelected
    @State var filePath: String?
    @State var transactions: [WeeklyTransaction] = []
    
    var selectFileButton: String {
        if transactions.isEmpty {
            "Select file"
        } else {
            "Select new file"
        }
    }
    
    var importDisabled: Bool {
        filePath == nil || importState != .ready
    }
    
    var body: some View {
        Form {
            Section {
                Button {
                    showFiles = true
                } label: {
                    Label(selectFileButton, systemImage: CarteretImage.importName)
                }
            } footer: {
                Text("Select the csv file generated by Weekly.")
            }
            
            if !transactions.isEmpty {
                Section {
                    Button("Import \(transactions.count) transactions") {
                        save(transactions: transactions)
                    }
                } footer: {
                    Text("""
Transactions without a corresponding target with be set to safe-to-spend.
Transactions without a corresponding category will be set to Other.
""")
                }
            }
        }
        .fileImporter(isPresented: $showFiles,
                      allowedContentTypes: [.commaSeparatedText]) { result in
            let result = result.flatMap { url in
                readFile(url: url)
            }
            switch result {
            case .success(let success):
                transactions = transactions(from: success)
            case .failure(let failure):
                logger.error("\(failure.localizedDescription)")
            }
        }
    }
    
    func readFile(url: URL) -> Result<String, Error> {
        let access = url.startAccessingSecurityScopedResource()
        defer {
            if access {
                url.stopAccessingSecurityScopedResource()
            }
        }
        return Result { try String(contentsOf: url) }
    }
    
    func transactions(from string: String) -> [WeeklyTransaction] {
        var transactions: [WeeklyTransaction] = []
        let data = string
        var rows = data.components(separatedBy: .newlines)
        logger.info("Rows :- \(rows.count)")
        rows.removeFirst()
        for row in rows {
            let column = row.components(separatedBy: ",")
            let id = column[0]
            let title = column[1]
            let date = column[2]
            let amount = column[3]
            let target = column[4]
            let linkedItemName = column[5]
            let categoryName = column[6]
            let originalTransactionAmount = column[7]
            let yearMonth = column[19]
            let transaction = WeeklyTransaction(
                id: id,
                title: title,
                date: WeeklyTransaction.date(from: date),
                amount: Decimal.from(string: amount),
                target: WeeklyTransaction.target(target),
                categoryName: categoryName,
                yearMonth: yearMonth
            )
            transactions.append(transaction)
        }
        logger.info("Found \(transactions.count) transactions to import")
        return transactions
    }
    
    func save(transactions: [WeeklyTransaction]) {
        for transaction in transactions {
            let sign: TransactionType = transaction.amount < 0 ? .expense : .income
            let swiftDataTransaction = Transaction(
                destination: transaction.target.destination,
                category: .other,
                item: nil,
                amount: abs(transaction.amount),
                type: sign,
                transactionDescription: transaction.title,
                date: transaction.date
            )
            modelContext.insert(swiftDataTransaction)
        }
        do {
            try modelContext.save()
            dismiss()
        } catch {
            logger.error("\(error.localizedDescription)")
        }
    }
}

#Preview {
    TransactionImport()
}
